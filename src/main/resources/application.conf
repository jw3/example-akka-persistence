akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = debug
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    serialize-messages = off // when on, the akka framework will determine whether or not messages can be serialized, else the plugin
    warn-about-java-serializer-usage = off

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }

    //    circuit-breaker {
    //      max-failures = 10
    //      call-timeout = 40s
    //      reset-timeout = 60s
    //    }
  }

  extensions = []

  test {
    # factor by which to scale timeouts during tests, e.g. to account for shared
    # build system load
    timefactor = 1.0

    # duration of EventFilter.intercept waits after the block is finished until
    # all required messages are received
    filter-leeway = 3s

    # duration to wait in expectMsg and friends outside of within() block
    # by default
    single-expect-default = 30s

    # The timeout that is added as an implicit by DefaultTimeout trait
    default-timeout = 5s
  }
}

jdbc-journal {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 40
  slick.db.minConnections = 1

  recovery-event-timeout = 60m
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 40
  slick.db.minConnections = 1
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  refresh-interval = "100ms"

  max-buffer-size = "250"

  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 40
  slick.db.minConnections = 1
}

slick {
  driver = "slick.driver.MySQLDriver$"
  db {
    host = "172.17.0.1"
    host = ${?MYSQL_HOST}
    port = "3306"
    port = ${?MYSQL_PORT}
    url = "jdbc:mysql://"${slick.db.host}":"${slick.db.port}"/example?cachePrepStmts=true&cacheCallableStmts=true&cacheServerConfiguration=true&useLocalSessionState=true&elideSetAutoCommits=true&alwaysSendSetIsolation=false&enableQueryTimeouts=false&connectionAttributes=none&verifyServerCertificate=false&useSSL=false&useUnicode=true&useLegacyDatetimeCode=false&serverTimezone=UTC&rewriteBatchedStatements=true"
    user = "root"
    user = ${?MYSQL_USER}
    password = "root"
    password = ${?MYSQL_PASSWORD}
    driver = "com.mysql.cj.jdbc.Driver"
    connectionTestQuery = "SELECT 1"
  }
}
